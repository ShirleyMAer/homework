import networkx as nximport numpy as np'''Action1：使用Python模拟下面的PageRank计算过程，求每个节点的影响力（迭代100次）简化模型随机模型'''#创建有向图G=nx.DiGraph()G.add_nodes_from(['A','B','C','D','E','F'])#简化模型arr=np.array([[0,1/3,0,1/3,0,1/3],             [0,0,1,0,0,0],             [0,0,0,1,0,0],            [1/3,0,1/3,0,1/3,0],            [0,1/2,1/2,0,0,0],              [0,0,0,1,0,0]])ZY=arr.TWi=np.ones((6,1))*1/6i=1while i<=100:    Wi=np.dot(ZY,Wi)    i+=1    print('current round:{},result is {}'.format(str(i),str(Wi)))#随机模型arr=np.array([[0,1/3,0,1/3,0,1/3],             [0,0,1,0,0,0],             [0,0,0,1,0,0],            [1/3,0,1/3,0,1/3,0],            [0,1/2,1/2,0,0,0],              [0,0,0,1,0,0]])ZY=arr.TWi=np.ones((6,1))*1/6d=0.85i=1while i<=100:    Wi=np.dot(ZY,Wi)*d+(1-d)/6    i+=1    print('current round:{},result is {}'.format(str(i),str(Wi)))#Action2：使用TextRank对新闻进行关键词提取，及文章摘要输出import jieba.analysedir=r'E:\开课吧\数据分析与Python程序设计基础\4\news.txt'file=open(dir,mode='r')text=''.join(file.readlines())keywords=jieba.analyse.textrank(text,topK=20,allowPOS=('n','ns','vn'))#文章摘要的输出from textrank4zh import TextRank4Keyword,TextRank4Sentencetr4w = TextRank4Keyword()tr4w.analyze(text=text, lower=True, window=2)print('关键词：')for item in tr4w.get_keywords(20, word_min_len=1):    print(item.word, item.weight)#输出句子tr4s=TextRank4Sentence()tr4s.analyze(text,lower=True,source='all_filters')print('摘要：')# 重要性较高的三个句子for item in tr4s.get_key_sentences(num=3):    # index是语句在文本中位置，weight表示权重    print(item.index, item.weight, item.sentence)